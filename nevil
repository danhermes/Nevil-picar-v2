#!/bin/bash

# Activate Python venv
source ./nevil2env/bin/activate

# Source ROS 2 overlays (parent first, then workspace)
source ~/ros2_humble/install/setup.bash
source ~/Nevil-picar-v2/install/setup.bash

# Use Python from venv
export PYTHON_EXECUTABLE="$HOME/Nevil-picar-v2/nevil2env/bin/python"

# Ensure PYTHONPATH and LD_LIBRARY_PATH are passed correctly to sudo
export PYTHONPATH="$($PYTHON_EXECUTABLE -c 'import sys; print(":".join(sys.path))')"
export LD_LIBRARY_PATH="$HOME/ros2_humble/install/lib:$HOME/Nevil-picar-v2/install/lib:$LD_LIBRARY_PATH"

# Get absolute path to ros2 binary (inside overlay)
ros2_cli="$(which ros2)"

# Use Python from venv
export PYTHON_EXECUTABLE="$HOME/Nevil-picar-v2/nevil2env/bin/python"

# Ensure PYTHONPATH and LD_LIBRARY_PATH are passed correctly to sudo
export PYTHONPATH="$($PYTHON_EXECUTABLE -c 'import sys; print(":".join(sys.path))')"
export LD_LIBRARY_PATH="$HOME/ros2_humble/install/lib:$HOME/Nevil-picar-v2/install/lib:$LD_LIBRARY_PATH"


# Dispatch logic
if [[ "$1" == "launch" ]]; then
    shift
    if [[ -z "$1" ]]; then
        echo "? Error: No launch file specified."
        exit 1
    fi
    echo "? Launching with: sudo $ros2_cli launch $@"
    # sudo -E env PYTHONPATH="$PYTHONPATH" LD_LIBRARY_PATH="$LD_LIBRARY_PATH" "$ros2_cli" launch "$@"     
    "$ros2_cli" launch "$@"     


elif [[ "$1" == "build" ]]; then
    shift
    echo "? Building with: colcon build $@"
    colcon build "$@"
    
    # Post-build: Apply wrapper script fixes for all packages
    apply_wrapper_fixes() {
        if [[ -d "src/wrapper_templates" ]]; then
            echo "? Applying wrapper script fixes..."
            local fixes_applied=0
            
            # Apply fixes for each package
            for package in nevil_bringup nevil_interfaces_ai nevil_core nevil_navigation nevil_realtime nevil_simulation; do
                # Create the lib/package directory if it doesn't exist but the package is installed
                if [[ -d "install/$package" ]]; then
                    mkdir -p "install/$package/lib/$package"
                fi
                
                if [[ -d "install/$package/lib/$package" ]]; then
                    # Copy wrapper scripts for this package
                    for template in src/wrapper_templates/*; do
                        if [[ -f "$template" && -x "$template" && "$template" != *".md" && "$template" != *"COLCON_IGNORE" ]]; then
                            template_name=$(basename "$template")
                            target_dir="install/$package/lib/$package"
                            
                            # Check if this wrapper belongs to this package by checking if the corresponding Python file exists
                            # or if the wrapper name matches package-specific patterns
                            should_copy=0
                            
                            # Always copy if the exact file already exists (original logic)
                            if [[ -f "$target_dir/$template_name" || -f "$target_dir/${template_name}.py" ]]; then
                                should_copy=1
                            # Copy package-specific wrappers based on package name
                            elif [[ "$package" == "nevil_bringup" && ("$template_name" == "battery_monitor" || "$template_name" == "hardware_init" || "$template_name" == "system_monitor" || "$template_name" == "system_monitor_wrapper" || "$template_name" == "nevil_cli") ]]; then
                                should_copy=1
                            elif [[ "$package" == "nevil_interfaces_ai" && ("$template_name" == "ai_interface_node" || "$template_name" == "dialog_manager_node" || "$template_name" == "speech_recognition_node" || "$template_name" == "speech_synthesis_node") ]]; then
                                should_copy=1
                                # Create the lib/nevil_interfaces_ai directory if it doesn't exist
                                mkdir -p "$target_dir"
                            elif [[ "$package" == "nevil_core" && "$template_name" == "system_manager_node" ]]; then
                                should_copy=1
                            elif [[ "$package" == "nevil_navigation" && "$template_name" == "motion_control_node" ]]; then
                                should_copy=1
                            elif [[ "$package" == "nevil_realtime" && ("$template_name" == "rt_config_manager" || "$template_name" == "rt_motor_control_node" || "$template_name" == "rt_sensor_node") ]]; then
                                should_copy=1
                            elif [[ "$package" == "nevil_simulation" && ("$template_name" == "simulation_node" || "$template_name" == "visualization_node") ]]; then
                                should_copy=1
                            fi
                            
                            if [[ $should_copy -eq 1 ]]; then
                                cp "$template" "$target_dir/" 2>/dev/null
                                chmod +x "$target_dir/$template_name" 2>/dev/null
                                fixes_applied=1
                                echo "  Copied $template_name to $package"
                            fi
                        fi
                    done
                fi
            done
            
            if [[ $fixes_applied -eq 1 ]]; then
                echo "? Wrapper scripts updated with correct library paths"
            fi
        fi
    }
    
    # Apply wrapper fixes for full builds or when specific packages are built
    apply_wrapper_fixes

else
    "$ros2_cli" "$@"
fi
