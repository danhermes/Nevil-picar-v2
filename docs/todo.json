{
  "project": "NEVIL",
  "description": "Nevil PiCar v2 Project Tasks",
  "issues": [
    {
      "id": "NEVIL-1",
      "name": "Missing System Monitor",
      "type": "Bug",
      "summary": "system_monitor executable not found in libexec directory",
      "description": "The ROS2 launch system is unable to find the system_monitor executable in the expected location: '/home/dan/nevil/src/install/nevil_bringup/lib/nevil_bringup'.\n\n**Root Cause Analysis:**\n- The system_monitor.py script exists in the source directory (~/nevil/src/nevil_bringup/scripts/system_monitor.py)\n- However, it's not being installed to the lib directory during the build process\n- Only nevil_cli.py is being installed, despite the CMakeLists.txt file specifying both scripts\n\n**Current Workaround:**\n- Modified the launch file to use ExecuteProcess instead of Node\n- This bypasses the need for the executable to be in the lib directory\n- Directly runs the Python script from its source location\n\n**Pros of ExecuteProcess Approach:**\n- Simplicity: Directly executes the script without installation requirements\n- Flexibility: Can run scripts from any location, not just installed locations\n- Development Friendly: Easier to test changes without rebuilding/reinstalling\n- No Build Dependencies: Works regardless of build system configuration\n- Quick Fix: Immediate solution without modifying build files\n\n**Cons of ExecuteProcess Approach:**\n- Non-Standard: Doesn't follow ROS2 best practices\n- Limited Lifecycle Management: Doesn't integrate with ROS2 node lifecycle\n- Manual Parameter Handling: Parameters must be passed as command-line arguments\n- Namespace Issues: May require manual namespace configuration\n- Resource Management: Less controlled termination and cleanup\n\n**Permanent Solution Options:**\n1. Fix the build system to properly install system_monitor.py to the lib directory\n2. Create a proper entry point in setup.py for the system_monitor script",
      "priority": "High",
      "status": "To Do",
      "assignee": null,
      "reporter": "Dan",
      "created": "2025-06-08T07:52:00+01:00",
      "updated": "2025-06-08T07:52:00+01:00",
      "components": ["nevil_bringup", "build_system"],
      "labels": ["bug", "launch-file", "executable-path"],
      "fixVersions": ["2.1.0"],
      "links": []
    },
    {
      "id": "NEVIL-2",
      "name": "Fix CMakeLists",
      "type": "Task",
      "summary": "Update CMakeLists.txt to properly install system_monitor.py",
      "description": "Update the CMakeLists.txt file in the nevil_bringup package to ensure that system_monitor.py is properly installed to the lib directory. This is a permanent solution to NEVIL-1.",
      "priority": "Medium",
      "status": "To Do",
      "assignee": null,
      "reporter": "Dan",
      "created": "2025-06-08T07:52:00+01:00",
      "updated": "2025-06-08T07:52:00+01:00",
      "components": ["nevil_bringup", "build_system"],
      "labels": ["build", "cmake"],
      "fixVersions": ["2.1.0"],
      "links": [{"type": "relates to", "issue": "NEVIL-1"}]
    },
    {
      "id": "NEVIL-3",
      "name": "Setup.py Entry Point",
      "type": "Task",
      "summary": "Create proper entry point in setup.py for system_monitor",
      "description": "Update the setup.py file in the nevil_bringup package to create a proper entry point for the system_monitor script. This is an alternative permanent solution to NEVIL-1.",
      "priority": "Medium",
      "status": "To Do",
      "assignee": null,
      "reporter": "Dan",
      "created": "2025-06-08T07:52:00+01:00",
      "updated": "2025-06-08T07:52:00+01:00",
      "components": ["nevil_bringup", "build_system"],
      "labels": ["build", "python"],
      "fixVersions": ["2.1.0"],
      "links": [{"type": "relates to", "issue": "NEVIL-1"}]
    },
    {
      "id": "NEVIL-4",
      "name": "Document Workaround",
      "type": "Task",
      "summary": "Document ExecuteProcess workaround in launch file",
      "description": "Add comments to the full_system.launch.py file explaining why ExecuteProcess is used instead of Node for the system_monitor script. This will help future developers understand the workaround.",
      "priority": "Low",
      "status": "To Do",
      "assignee": null,
      "reporter": "Dan",
      "created": "2025-06-08T07:52:00+01:00",
      "updated": "2025-06-08T07:52:00+01:00",
      "components": ["nevil_bringup", "documentation"],
      "labels": ["documentation", "launch-file"],
      "fixVersions": ["2.0.1"],
      "links": [{"type": "relates to", "issue": "NEVIL-1"}]
    },
    {
      "id": "NEVIL-5",
      "name": "Missing Hardware Interface",
      "type": "Bug",
      "summary": "Implement RTHardwareInterface to control physical robot",
      "description": "The documentation describes a hardware abstraction layer that allows the system to control the physical PiCar-X robot, but the actual implementation is missing. The rt_motor_control_node.py file contains a comment: \"In a real implementation, this would use the RTHardwareInterface with proper mutex handling\", but this interface is not implemented.\n\n**Impact:**\n- The system cannot control the physical robot despite documentation claiming this functionality\n- The Picarx class and robot_hat library are available but not integrated into the codebase\n- Core functionality described in the architecture documentation is not implemented\n\n**Required Implementation:**\n1. Create RTHardwareInterface class that interfaces with the robot_hat library\n2. Implement methods for motor control, servo control, and sensor reading\n3. Integrate with the existing hardware abstraction layer\n4. Update the rt_motor_control_node.py to use the RTHardwareInterface\n5. Test with the physical PiCar-X robot",
      "priority": "Critical",
      "status": "Done",
      "assignee": "AI Assistant",
      "reporter": "Dan",
      "created": "2025-06-08T08:33:00+01:00",
      "updated": "2025-06-08T08:38:00+01:00",
      "resolution": "Implemented RTHardwareInterface class that interfaces with the Picarx class and robot_hat library. The implementation includes thread-safe methods for motor control, steering, distance sensing, and camera control with proper mutex handling. Updated rt_motor_control_node.py to use this interface and added an entry point in setup.py for testing the hardware interface.",
      "components": ["nevil_realtime", "hardware_interface"],
      "labels": ["bug", "hardware", "critical-functionality"],
      "fixVersions": ["2.0.0"],
      "links": []
    },
    {
      "id": "NEVIL-6",
      "name": "Voice Control Node Separation",
      "type": "Task",
      "summary": "Separate Voice Control Node from AI Processing Node",
      "description": "Currently, the Voice Control Node (N5) functionality is embedded within the `nevil_interfaces_ai` package, which doesn't align with the architectural design specified in `docs/Nevil_v2.0_Architectural_Overview.md`. The architecture specifies that the Voice Control Node (N5) should be separate from the AI Processing Node (N6).\n\n**Tasks:**\n\n1. Create a new package `nevil_voice_control` to contain all voice-related functionality:\n   - Move `speech_recognition_node.py` to the new package\n   - Move `speech_synthesis_node.py` to the new package\n   - Move voice-specific parts of `dialog_manager_node.py` to the new package\n   - Move `audio_hardware_interface.py` to the new package\n\n2. Update the interfaces between packages:\n   - Define clear message interfaces between `nevil_voice_control` and `nevil_interfaces_ai`\n   - Ensure proper topic/service/action definitions for cross-package communication\n\n3. Update launch files and dependencies:\n   - Update package.xml with appropriate dependencies\n   - Create launch files for the voice control nodes\n   - Update existing launch files that reference the moved nodes\n\n4. Testing:\n   - Test voice recognition functionality after the move\n   - Test speech synthesis functionality after the move\n   - Test integration with AI processing\n\nThis refactoring will bring the implementation in line with the architectural design, creating a cleaner separation of concerns between voice control and AI processing.",
      "priority": "Medium",
      "status": "To Do",
      "assignee": null,
      "reporter": "AI Assistant",
      "created": "2025-06-08T19:43:00+01:00",
      "updated": "2025-06-08T19:43:00+01:00",
      "components": ["nevil_interfaces_ai", "architecture"],
      "labels": ["refactoring", "architecture", "voice-control"],
      "fixVersions": ["2.1.0"],
      "links": []
    },
    {
      "id": "NEVIL-7",
      "name": "Test File Organization",
      "type": "Task",
      "summary": "Reorganize all test files into structured /test directory",
      "description": "All test files were scattered throughout the project root and source packages, making them difficult to find and maintain. This task involved creating a structured test directory organization and moving all test files to appropriate categories.\n\n**Completed Work:**\n\n1. **Created structured test directory:**\n   - `/test/navigation/` - Navigation and movement tests (8 files)\n   - `/test/hardware/` - Hardware interface tests (7 files)\n   - `/test/ai/` - AI, speech, and command processing tests (12 files)\n   - `/test/integration/` - System integration tests (4 files)\n   - `/test/unit/` - Unit tests and isolated components (11 files)\n   - `/test/docs/` - Testing documentation (1 file)\n\n2. **Fixed import paths and dependencies:**\n   - Updated hardcoded paths in test files to use relative paths\n   - Fixed API parameter mismatches in navigation tests\n   - Added missing import statements\n   - Updated CMakeLists.txt to remove moved test file references\n\n3. **Verified functionality:**\n   - Confirmed navigation tests work after reorganization\n   - Fixed API compatibility issues\n   - Tested import paths and module loading\n\n4. **Created comprehensive documentation:**\n   - Added `/test/README.md` with complete directory guide\n   - Documented how to run tests from new locations\n   - Provided clear categorization guidelines\n\n**Benefits:**\n- Clean project root directory\n- Organized tests by functional area\n- Easy navigation for developers\n- Improved maintainability\n- Scalable structure for future tests\n\n**Total files organized:** 42 test files + 1 documentation file",
      "priority": "Medium",
      "status": "Done",
      "assignee": "AI Assistant",
      "reporter": "Dan",
      "created": "2025-07-01T16:14:00+01:00",
      "updated": "2025-07-01T16:14:00+01:00",
      "resolution": "Successfully reorganized all test files into structured /test directory with proper categorization, fixed import paths, verified functionality, and created comprehensive documentation. Project now has clean organization and maintainable test structure.",
      "components": ["project_structure", "testing", "documentation"],
      "labels": ["organization", "testing", "maintenance", "cleanup"],
      "fixVersions": ["2.0.1"],
      "links": []
    },
    {
      "id": "NEVIL-8",
      "name": "Verify All Moved Test Files Functionality",
      "type": "Task",
      "summary": "Test and fix import paths for all remaining test files after reorganization",
      "description": "After reorganizing 42 test files into the structured /test directory, only the navigation tests have been verified to work correctly. The remaining test files in hardware, AI, integration, and unit test categories need to be tested and their import paths fixed if necessary.\n\n**Scope:**\n\n1. **Hardware Tests (7 files):**\n   - `test_direct_hardware.py`\n   - `test_hardware_architecture.py`\n   - `test_hardware_initialization.py`\n   - `test_picar_hardware_logging.py`\n   - `test_picarx_integration.py`\n   - `test_real_hardware_logging.py`\n   - `setup_picarx.py`\n\n2. **AI Tests (12 files):**\n   - `test_ai_command_import.py`\n   - `test_whisper_tts.py`\n   - `run_test_dialog_manager.py`\n   - `run_dialog_manager.py`\n   - `run_speech_interface.py`\n   - `test_env_loading.py`\n   - `test_audio_hardware.py`\n   - `test_navigation_actions.py`\n   - `test_action_execution.py`\n   - `test_openai_message_flow.py`\n   - `test_speech_coordination.py`\n   - `test_integration.py`\n\n3. **Integration Tests (4 files):**\n   - `test_action_workflow.py`\n   - `run_unit_tests_modified.py`\n   - `generate_test_coverage.py`\n   - `integration_test.py`\n\n4. **Unit Tests (11 files):**\n   - Various Python, shell, and other test files\n\n**Tasks:**\n- Run each test file to identify import path issues\n- Fix hardcoded paths using relative path resolution\n- Update API calls and parameters where needed\n- Verify ROS2 environment dependencies\n- Document any tests that require specific hardware or environment setup\n- Update test documentation with any special requirements\n\n**Success Criteria:**\n- All test files can be executed without import errors\n- Tests that require hardware/environment clearly documented\n- Any API compatibility issues resolved\n- Test execution instructions updated in /test/README.md",
      "priority": "Medium",
      "status": "To Do",
      "assignee": null,
      "reporter": "Dan",
      "created": "2025-07-01T16:15:00+01:00",
      "updated": "2025-07-01T16:15:00+01:00",
      "components": ["testing", "project_structure"],
      "labels": ["testing", "verification", "import-paths", "post-reorganization"],
      "fixVersions": ["2.0.1"],
      "links": [{"type": "follows", "issue": "NEVIL-7"}]
    }
  ]
}